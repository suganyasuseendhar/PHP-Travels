package com.w3schools.utils;

import java.time.Duration;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.Alert;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;

import io.github.bonigarcia.wdm.WebDriverManager;


public class BaseTest {

	public static WebDriver driver= null;
	
	public void launchbrowser(String url) {
		
	try
	{
	WebDriverManager.chromedriver().setup();
	driver = new ChromeDriver();
	driver.manage().window().maximize();
	driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
	
	driver.get(url);
	/*WebDriverManager.chromedriver().setup();
	ChromeOptions options = new ChromeOptions();
	options.addArguments("--remote-allow-origins=*");
	driver = new ChromeDriver(options);
	driver.manage().window().maximize();
	driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);*/
	}
	
	catch(Exception ex)
	{
		
		ex.printStackTrace();
		System.out.println("Problem while launching the browser");	
		
	}
}  
	public void quitBrowser() {
		try {
			driver.quit();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void closeBrowser() {
		try {
			driver.close();
		}

		catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void typeText(WebElement ele, String text) {
		try {
			ele.clear();
			ele.sendKeys(text);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void clickAction(WebElement ele) {
		try {
			ele.click();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void waitForElement(WebElement ele) {
		try {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOf(ele));
			wait.until(ExpectedConditions.elementToBeClickable(ele));
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}

	public void pollingWait(WebElement ele) {
		try {
			Wait<WebDriver> wait = new FluentWait<WebDriver>(driver).withTimeout(Duration.ofSeconds(30))
					.pollingEvery(Duration.ofSeconds(2));
			wait.until(ExpectedConditions.visibilityOf(ele));
			wait.until((ExpectedConditions.elementToBeClickable(ele)));
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}

	public void selectDDByValue(WebElement ele, String value) {
		try {
			Select sel = new Select(ele);
			sel.selectByValue(value);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}

	public void selectDDByIndex(WebElement ele, int index) {
		try {
			Select sel = new Select(ele);
			sel.selectByIndex(index);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}

	public void selectDDByVisibleText(WebElement ele, String VisibleText) {
		try {
			Select sel = new Select(ele);
			sel.selectByVisibleText(VisibleText);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void acceptAlert() {
		try {
			Alert alert = driver.switchTo().alert();
			alert.accept();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void dismissAlert() {
		try {
			Alert alert = driver.switchTo().alert();
			alert.dismiss();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void moveTo(WebElement ele) {
		try {
			Actions act = new Actions(driver);
			act.moveToElement(ele).build().perform();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void rightClick (WebElement ele) {
		try {

			Actions act = new Actions(driver);
			act.moveToElement(ele).contextClick().build().perform();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	
	
}
	public void moveToOnePlace(WebElement source, WebElement destination ) {
	try{

		Actions act = new Actions(driver);
		act.dragAndDrop(source, destination).build().perform();
	
	}
	catch(Exception ex){
		
		ex.printStackTrace();
		
	}	
	}
	
	public void twoClick (WebElement ele) {
		
		try {
			
			Actions act = new Actions(driver);
			act.doubleClick(ele).build().perform();
			
		}
		catch(Exception ex) {
			
			ex.printStackTrace();
		}
	}
	
	
}


/*BASETEST.Java



public void quitBrowser() {
		try {
			driver.quit();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void closeBrowser() {
		try {
			driver.close();
		}

		catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void typeText(WebElement ele, String text) {
		try {
			ele.clear();
			ele.sendKeys(text);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void clickAction(WebElement ele) {
		try {
			ele.click();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void waitForElement(WebElement ele) {
		try {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOf(ele));
			wait.until(ExpectedConditions.elementToBeClickable(ele));
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}

	public void pollingWait(WebElement ele) {
		try {
			Wait<WebDriver> wait = new FluentWait<WebDriver>(driver).withTimeout(Duration.ofSeconds(30))
					.pollingEvery(Duration.ofSeconds(2));
			wait.until(ExpectedConditions.visibilityOf(ele));
			wait.until((ExpectedConditions.elementToBeClickable(ele)));
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}

	public void selectDDByValue(WebElement ele, String value) {
		try {
			Select sel = new Select(ele);
			sel.selectByValue(value);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}

	public void selectDDByIndex(WebElement ele, int index) {
		try {
			Select sel = new Select(ele);
			sel.selectByIndex(index);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}

	public void selectDDByVisibleText(WebElement ele, String VisibleText) {
		try {
			Select sel = new Select(ele);
			sel.selectByVisibleText(VisibleText);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void acceptAlert() {
		try {
			Alert alert = driver.switchTo().alert();
			alert.accept();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void dismissAlert() {
		try {
			Alert alert = driver.switchTo().alert();
			alert.dismiss();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void moveTo(WebElement ele) {
		try {
			Actions act = new Actions(driver);
			act.moveToElement(ele).build().perform();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void rightClick(WebElement ele) {
		try {

			Actions act = new Actions(driver);
			act.moveToElement(ele).contextClick().build().perform();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	// isEnabled
	// frame
	// windowhandling

	// draganddrop
	// doubleclick
	// clickAndHold

	// javasscriptexecutor (scroll up, down, click)
	// screenshot
  
  
  
  
  
  
  
  
  
  
  ....................................................................
  
  
  
  LoginPage.java
  
  
  
  
  
  package com.w3cschools.pages;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;

import com.w3schools.utils.BaseTest;

public class LoginPage extends BaseTest {
	
	@FindBy(id="modalusername")
	WebElement username;
	
	@FindBy(id="current-password")
	WebElement password;
	
	@FindBy(xpath="//span[(text()='Log in')]")
	WebElement login;
	
	public void setEmail(String user) {
		//username.sendKeys(user);
		//using BaseTest method to type text
		waitForElement(username);
		typeText(username,user);
	}
	
	public void setPassword(String pwd) {
		
		waitForElement(password);
		typeText(password,pwd);
		//password.sendKeys(pwd);
	}
	

	
	public void clickLogin()
	{
		waitForElement(login);
		clickAction(login);
		//login.click();
	}

	
}

	// fileupload
*/
